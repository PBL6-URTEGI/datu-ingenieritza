---
- name: Crear contenedor kafka-connect
  community.docker.docker_container:
    name: kafka-connect
    image: confluentinc/cp-kafka-connect:7.4.0
    ports:
      - "8083:8083"
    env:
      CONNECT_BOOTSTRAP_SERVERS: 10.0.20.40:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/mongo-kafka/plugins
    volumes:
      - /root/plugins:/etc/mongo-kafka/plugins
    restart_policy: always
  become: true

- name: Esperar a que Kafka Connect est√© accesible
  uri:
    url: http://localhost:8083
    method: GET
    status_code: 200
  register: result
  retries: 10
  delay: 5
  until: result.status == 200

- name: Configurar conector Mongo Sink
  uri:
    url: http://localhost:8083/connectors/mongo-sink-connector/config
    method: PUT
    headers:
      Content-Type: application/json
    body: |
      {
        "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
        "tasks.max": "1",
        "topics": "stream_zona1",
        "connection.uri": "mongodb://root:root@localhost:27017/stream",
        "database": "stream",
        "collection": "ebro",
        "document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.ProvidedInValueStrategy",
        "document.id.strategy.overwrite.existing": "true"
      }
    body_format: json
    status_code: [200, 201]
  become: true